head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2014.06.09.07.32.21;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.06.08.10.18.56;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.06.08.07.52.12;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#ifndef __HASH_STACK_H__
#define __HASH_STACK_H__

#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include "auxlib.h"

typedef struct hsnode *hsnode;
typedef struct hashstack *hashstack;

struct hashstack{
   size_t size;                  //number of slots
   size_t load;                  //number of elements
   hsnode *chains;               //array of chain
   hsnode stack;                 //itemifier stackA
   hsnode gblhead;               //ptr to global block head stack
   int block;                    //global current scope
};

struct hsnode{
   const char* lexeme;           // its adddress is hashed to table

   int filenr;                   // index into filename stack
   int linenr;                   // line number from source code
   int offset;                   // offset of token with current line
   int blocknr;                  // indicate block/scope level

   unsigned long attributes;     // do i need this? dupped in AST
   hashstack fields;             // if this is struct, it has fields
   hsnode structid;              // points to the type it used
   hsnode params;                // a list of parameters
   hsnode next;                  // a link for stack
   hsnode link;                  // hash link for hash-channing
};

hashstack new_hashstack (void);
void delete_hashstack (hashstack *this); //ptr will be nulled

//Make sure the key is unique for push() & add(),
//otherwise it will return existen item.
//
//Each of the operations returns the object operated on.
//Caller can modify the content directly with the above
//non-encapsulated fields
//
//hash operations
hsnode add_hashstack (hashstack this, const char *key);
hsnode find_hashstack (hashstack this, const char *key);
hsnode rm_hashstack (hashstack this, const char *key);
void print_hashstack (hashstack this, FILE *out, char detail);

//stack operations
hsnode push_hashstack (hashstack this, const char *key);
hsnode pop_hashstack (hashstack this);
hsnode peak_hashstack (hashstack this);
void list_hashstack (hashstack this, FILE *out);


RCSH(HASHSTACK_H,"$Id: hashstack.h,v 1.2 2014-06-08 03:18:56-07 - - $")
#endif
@


1.2
log
@-
@
text
@d5 1
a5 1
#include <stdint.h> //for int types
d11 10
a20 7
typedef struct hashstack{
   size_t size;            //number of slots
   size_t load;            //number of elements
   hsnode *chains;
   hsnode stack;          //itemifier stackA
   hsnode gblhead;        //ptr to global stack block
}hashstack;
d23 1
a23 5
   const char* lexeme;                // get from stringtable
   unsigned long attributes;

   hashstack *structtablenode;   //TODO: if typeid is is present
   hashstack *fields;        
d30 6
a35 3
   struct hsnode *paramlist;     // a list of parameters
   struct hsnode *link;          // hash link for channing
   struct hsnode *stacknext;     // a link for stack
d38 22
a59 2
void print_hashstack (hashstack *this, FILE *out, char detail);
hashstack *new_hashstack (void);
d61 1
a61 7
hsnode add_hashstack (hashstack *this, const char *item);
hsnode find_hashstack (hashstack *this, const char *item);
hsnode rm_hashstack (hashstack *this, const char *item);

hsnode push_hashstack (hashstack *this, const hsnode *item);
hsnode pop_hashstack (hashstack *this);
RCSH(HASHSTACK_H,"$Id: hashstack.h,v 1.1 2014-06-08 00:52:12-07 - - $")
@


1.1
log
@-
@
text
@d24 1
a24 1
   hashstack *fieldtable;        
d45 1
a45 1
RCSH(HASHSTACK_H,"$Id: hashstack.h,v 1.4 2014-06-07 20:15:50-07 - - $")
@
